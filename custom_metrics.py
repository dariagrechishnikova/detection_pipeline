# -*- coding: utf-8 -*-
"""metrics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1496W0ZmRU6S4eeAAm3gABtZW9YJ1w_me
"""

import tensorflow as tf
from runner import *
from trainer import *
from data_provider import *
from custom_models import *
from custom_losses import *
import numpy as np
from keras import backend as K
from tensorflow import keras

def dice_coef(y_true, y_pred):
    y_true_f = K.flatten(y_true)
    y_pred_f = K.flatten(y_pred)
    intersection = K.sum(y_true_f * y_pred_f)
    return (2.0 * intersection + 1.0) / (K.sum(y_true_f) + K.sum(y_pred_f) + 1.0)


def jacard_coef(y_true, y_pred):
    y_true_f = K.flatten(y_true)
    y_pred_f = K.flatten(y_pred)
    intersection = K.sum(y_true_f * y_pred_f)
    return (intersection + 1.0) / (K.sum(y_true_f) + K.sum(y_pred_f) - intersection + 1.0)


def mean_iou(y_true, y_pred):
    n_classes = y_pred.shape[-1]
    intersection = tf.reduce_sum(y_true * y_pred, [1,2])
    all_true = tf.reduce_sum(y_true, [1,2])
    all_pred = tf.reduce_sum(y_pred, [1,2])
    iou = (intersection + 1) / (all_true + all_pred - intersection + 1)
    return tf.reduce_mean(iou, axis = [0,1])