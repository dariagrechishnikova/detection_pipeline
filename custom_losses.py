# -*- coding: utf-8 -*-
"""losses.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qCXO1Do7SSW9vkzUNJuQt0OLvKqvIUmF
"""
import tensorflow as tf
from runner import *
from trainer import *
from data_provider import *
from custom_models import *
from custom_metrics import *
import os
import random
from tensorflow.keras.layers.experimental import preprocessing 
import matplotlib.pyplot as plt
import numpy as np
from keras import backend as K
from keras.layers.merge import concatenate
from keras.utils.data_utils import get_file
from tensorflow import keras
from tensorflow.keras.losses import (
    binary_crossentropy,
    sparse_categorical_crossentropy
)


def dice_coef(y_true, y_pred):
    y_true_f = K.flatten(y_true)
    y_pred_f = K.flatten(y_pred)
    intersection = K.sum(y_true_f * y_pred_f)
    return (2.0 * intersection + 1.0) / (K.sum(y_true_f) + K.sum(y_pred_f) + 1.0)


def jacard_coef(y_true, y_pred):
    y_true_f = K.flatten(y_true)
    y_pred_f = K.flatten(y_pred)
    intersection = K.sum(y_true_f * y_pred_f)
    return (intersection + 1.0) / (K.sum(y_true_f) + K.sum(y_pred_f) - intersection + 1.0)


def jacard_coef_loss(y_true, y_pred):
    return -jacard_coef(y_true, y_pred)


def dice_coef_loss(y_true, y_pred):
    return -dice_coef(y_true, y_pred)



def Combo_loss(targets, inputs, eps=1e-9, ALPHA = 0.6, CE_RATIO = 0.5):
    #ALPHA < 0.5 penalises FP more, > 0.5 penalises FN more
    #CE_RATIO weighted contribution of modified CE loss compared to Dice loss
    smooth = 1
    targets = K.flatten(targets)
    inputs = K.flatten(inputs)
    
    intersection = K.sum(targets * inputs)
    dice = (2. * intersection + smooth) / (K.sum(targets) + K.sum(inputs) + smooth)
    inputs = K.clip(inputs, eps, 1.0 - eps)
    out = - (ALPHA * ((targets * K.log(inputs)) + ((1 - ALPHA) * (1.0 - targets) * K.log(1.0 - inputs))))
    weighted_ce = K.mean(out, axis=-1)
    combo = (CE_RATIO * weighted_ce) - ((1 - CE_RATIO) * dice)
    
    return combo



def iou_fn_loss(y_true, y_pred):
    n_classes = y_pred.shape[-1]
    intersection = tf.reduce_sum(y_true * y_pred, [1,2])
    neg_y_pred = 1 - y_pred
    false_negatives = tf.reduce_sum(y_true * y_pred, [1,2])
    all_true = tf.reduce_sum(y_true, [1,2])
    all_pred = tf.reduce_sum(y_pred, [1,2])
    iou = ((intersection + 1) / (all_true + all_pred + (10*false_negatives) - intersection + 1))
    weights = [0,1,1/4,1/10]
    iou_weighted = iou * weights
    return -tf.reduce_sum(iou_weighted, axis = [0,1])


def iou_loss(y_true, y_pred):
    n_classes = y_pred.shape[-1]
    intersection = tf.reduce_sum(y_true * y_pred, [1,2])
    all_true = tf.reduce_sum(y_true, [1,2])
    all_pred = tf.reduce_sum(y_pred, [1,2])
    iou = ((intersection + 1) / (all_true + all_pred - intersection + 1))
    return -tf.reduce_sum(iou, axis = [0,1])











def broadcast_iou(box_1, box_2):
    # box_1: (..., (x1, y1, x2, y2))
    # box_2: (N, (x1, y1, x2, y2))

    # broadcast boxes
    box_1 = tf.expand_dims(box_1, -2)
    box_2 = tf.expand_dims(box_2, 0)
    # new_shape: (..., N, (x1, y1, x2, y2))
    new_shape = tf.broadcast_dynamic_shape(tf.shape(box_1), tf.shape(box_2))
    box_1 = tf.broadcast_to(box_1, new_shape)
    box_2 = tf.broadcast_to(box_2, new_shape)

    int_w = tf.maximum(tf.minimum(box_1[..., 2], box_2[..., 2]) -
                       tf.maximum(box_1[..., 0], box_2[..., 0]), 0)
    int_h = tf.maximum(tf.minimum(box_1[..., 3], box_2[..., 3]) -
                       tf.maximum(box_1[..., 1], box_2[..., 1]), 0)
    int_area = int_w * int_h
    box_1_area = (box_1[..., 2] - box_1[..., 0]) * \
        (box_1[..., 3] - box_1[..., 1])
    box_2_area = (box_2[..., 2] - box_2[..., 0]) * \
        (box_2[..., 3] - box_2[..., 1])
    return int_area / (box_1_area + box_2_area - int_area)


# As tensorflow lite doesn't support tf.size used in tf.meshgrid, 
# we reimplemented a simple meshgrid function that use basic tf function.
def _meshgrid(n_a, n_b):
  #Outputs a list of two  tensors with shapes [n_b, n_a]. Inside are grid indexes
  #Ex: _meshgrid(4, 3)
  #[<tf.Tensor: shape=(3, 4), dtype=int32, numpy=
  #array([[0, 1, 2, 3],
  #      [0, 1, 2, 3],
  #     [0, 1, 2, 3]], dtype=int32)>,
  #<tf.Tensor: shape=(3, 4), dtype=int32, numpy=
  #array([[0, 0, 0, 0],
  #      [1, 1, 1, 1],
  #      [2, 2, 2, 2]], dtype=int32)>]

    return [
        tf.reshape(tf.tile(tf.range(n_a), [n_b]), (n_b, n_a)),
        tf.reshape(tf.repeat(tf.range(n_b), n_a), (n_b, n_a))
    ]



def YoloXLoss(classes, ignore_thresh=0.5):
    def yolo_loss(y_true, y_pred):
        # 1. transform all pred outputs
        # y_pred: (batch_size, grid, grid, anchors, (x, y, w, h, obj, ...cls))
        pred_box, pred_obj, pred_class = tf.split(
            y_pred, (4, 1, classes), axis=-1)
        pred_xy = pred_box[..., 0:2]
        pred_wh = pred_box[..., 2:4]
        pred_x1y1 = pred_xy - pred_wh / 2
        pred_x2y2 = pred_xy + pred_wh / 2
        pred_box = tf.concat([pred_x1y1, pred_x2y2], axis=-1)

        # 2. transform all true outputs
        # y_true: (batch_size, grid, grid, anchors, (x1, y1, x2, y2, obj, cls))
        true_box, true_obj, true_class_idx = tf.split(
            y_true, (4, 1, 1), axis=-1)
        true_xy = true_box[..., 0:2]
        true_wh = true_box[..., 2:4]
        true_x1y1 = true_xy - true_wh / 2
        true_x2y2 = true_xy + true_wh / 2
        true_box = tf.concat([true_x1y1, true_x2y2], axis=-1)

        # give higher weights to small boxes
        box_loss_scale = 2 - true_wh[..., 0] * true_wh[..., 1]

        # 3. calculate all masks
        obj_mask = tf.squeeze(true_obj, -1)
        # ignore false positive when iou is over threshold
        best_iou = tf.map_fn(
            lambda x: tf.reduce_max(broadcast_iou(x[0], tf.boolean_mask(
                #take elements from tensor on positions where mask 
                #elements are True. Mask dim <= tensor dim
                x[1], tf.cast(x[2], tf.bool))), axis=-1),
            (pred_box, true_box, obj_mask),
            tf.float32)
        ignore_mask = tf.cast(best_iou < ignore_thresh, tf.float32)

        # 4. calculate all losses
        xy_loss = obj_mask * box_loss_scale * \
            tf.reduce_sum(tf.square(true_xy - pred_xy), axis=-1)
        wh_loss = obj_mask * box_loss_scale * \
            tf.reduce_sum(tf.square(true_wh - pred_wh), axis=-1)
        obj_loss = binary_crossentropy(true_obj, pred_obj)
        obj_loss = obj_mask * obj_loss + \
            (1 - obj_mask) * ignore_mask * obj_loss
        # TODO: use binary_crossentropy instead
        class_loss = obj_mask * sparse_categorical_crossentropy(
            true_class_idx, pred_class)

        # 6. sum over (batch, gridx, gridy) => (batch, 1)
        xy_loss = tf.reduce_sum(xy_loss, axis=(1, 2))
        wh_loss = tf.reduce_sum(wh_loss, axis=(1, 2))
        obj_loss = tf.reduce_sum(obj_loss, axis=(1, 2))
        class_loss = tf.reduce_sum(class_loss, axis=(1, 2))

        return xy_loss + wh_loss + obj_loss + class_loss
    return yolo_loss